#!/usr/bin/env zsh
# -*- mode: sh; sh-indentation: 4; indent-tabs-mode: nil; sh-basic-offset: 4; -*-

# Copyright (c) 2023 Sebastian Gniazdowski

# Run as script? Or as a function? Supports both ways.

iqopen()
{
# Preamble – emulate & 0=…
eval "${SNIP_EMULATE_OPTIONS_ZERO:-false}"||\
    0=${${${(M)${0::=${(%):-%x}}:#/*}:-$PWD/$0}:a}
source $0:h:h/share/preamble.inc.zsh --script --fun

local -A Opts;local -a opts
int/iq::init-sm-con Opts opts "$@"||{print QE>>/tmp/reply;return 13}
set -- "$reply[@]"
eval "$REPLY"

iqw(){
    -zui_glib_msg "$@"
}

iqopen_synh_switch(){
    ((ZUI[SRC_HIGHLIGHT]=1-ZUI[SRC_HIGHLIGHT]))
    ZUI[SRC_HIGHLIGHT_SWITCHED]=1
    if generator_B;then
        ((ZUI[SRC_HIGHLIGHT]))&&local txt=" ON"||local txt=" OFF"
        iqw "Syntax highlighting switched" $txt
    fi
}

iqopen_preview_file(){
    ZUI[VIEW_CHANGE]=1
    ((ZUI[gen_B_idx]=1-ZUI[gen_B_idx]))
    if ((ZUI[gen_B_idx]%2));then
        ZUI[CURRENT_IDX_MAIN_BKP]=$ZUI[CURRENT_IDX]
        #ZUI[CURRENT_IDX]=$ZUI[CURRENT_IDX_PVIEW_BKP]
    else
        ZUI[CURRENT_IDX_PVIEW_BKP]=$ZUI[CURRENT_IDX]
        #ZUI[CURRENT_IDX]=$ZUI[CURRENT_IDX_MAIN_BKP]
    fi
    ZUI[PREV_CURRENT_IDX]=$ZUI[CURRENT_IDX]
    generator_B
    #__last_element=$#__list
}

separ() {
    REPLY="$ZUI[YELLOW]${(l:COLUMNS*3::—:):-}$ZUI[FMT_END]";
}

if ((!$+Opts[--refresh])); then
    ok/qnstr $PWD&&local APP=$REPLY
    ZUI[SRC_HIGHLIGHT]=1
    -zui_glib_cleanup deserialize:"iqopen_$APP"
    -zui_glib_init app:"iqopen_$APP" app_name:"°Open° Console"
    emulate -L zsh -o extendedglob -o typesetsilent -o warncreateglobal -o combiningchars -o rcquotes
    -zui_glib_init2 # after emulate
    ZUI[gen_B_idx]=0

    # Needed for immediate output from coprocesses (disables buffering).
    ((${+commands[stdbuf]}))&& \
        local -a stdbuf1=( stdbuf -o0 -i0 ) stdbuf2=( stdbuf -o0 -i0 )
    ((${+commands[gstdbuf]}))&& \
        local -a stdbuf1=( gstdbuf -o0 -i0 ) stdbuf2=( gstdbuf -o0 -i0 )

    ZUI[COLORING_MATCH_MULTIPLE]=1
    ZUI[COLORING_COLOR]=$ZUI[BOLD]$ZUI[YELLOW]

    -zui_glib_store_default_app_config b:instant_search 1
    -zui_glib_store_default_app_config s:select_mode "quit"   # Quit event loop on text-selection
    -zui_glib_store_default_app_config b:status_size 5
    -zui_glib_store_default_app_config b:status_pointer 1
    -zui_glib_store_default_app_config b:text_select 1        # Allow selection of text
    -zui_glib_store_default_app_config s:timeout 25
    -zui_glib_store_default_app_config s:mark "white MAGENTA reverse"
    -zui_glib_store_default_app_config s:text_mode off
    -zui_glib_store_default_app_config b:top_anchors 0
    ZUI[UNIQ_MODE]=0
    [[ $1 == open ]]&&shift
    [[ -n $* ]]&&ZUI[SEARCH_BUFFER]=$* ZUI[START_IN_SEARCH]=1

    local -a qitems
    integer Q0_SAVE_PIPE
    if read -k -t -u0; then
        ZUI[FIRST_0_INPUT]=$REPLY
        ZUI[HAVE_0_INPUT]=1
        ZUI[cat_started]=1
        ZUI[gen_B_idx]=0
        exec {Q0_SAVE_PIPE}<&0
    fi
fi

zui::bindkey F2 '{iqopen_preview_file;}'
#    zui::bindkey F3 "{print q:$ZUI[mark]}"
zui::bindkey F9 '{print current:$ZUI[CURRENT_IDX], PVIEW:$ZUI[CURRENT_IDX_PVIEW_BKP], main:$ZUI[CURRENT_IDX_MAIN_BKP] sptr:$ZUI[status_pointer];}'
zui::bindkey F10 '{builtin source $ZIQ_CON_DIR/iqopen --refresh||\
                    iqw -r "Reload finished with error: " $?;}'
zui::bindkey F7 '{iqopen_synh_switch;}'

generator_A() {
    local mod="$1" ice="$2"

    local -a group1
    reply=()

    # First Group
    : -zui_glib_rc_button "button17" "·New feature·" \
        'reply=( ",all," ); new_feature'
    group1=( $reply ) reply=()

    # Content
    reply=( "$group1[@]" )

    # Non-selectable lines  Hops to jump with [ and ]   Local anchors
    reply2=( )              reply3=( 3 )                reply4=( )

}

generator_B(){
    integer EC
    local -a gener=(generator_B_tree generator_B_preview)
    $gener[1+(ZUI[gen_B_idx]%2)]
    EC=$?
    (($3))||{-zui_glib_fly_array_refresh 1;}
    return EC
}

generator_B_preview() {
    local QPATH QTXT
    ((ZUI[CURRENT_IDX]>0&&ZUI[SRC_HIGHLIGHT_SWITCHED]==0))&&\
        {QPATH=$__list[ZUI[CURRENT_IDX]];ZUI[QPATH]=$QPATH;}||\
        QPATH=$ZUI[QPATH]
    ZUI[COLORING_PATTERN]="·[^·]##·" ZUI[SRC_HIGHLIGHT_SWITCHED]=0
    qitems=()
    {
        if [[ -f $QPATH ]];then
            QTXT="Contents of file: ·$QPATH·"\
" located at: ·${${${(M)QPATH##/*}:+$QPATH:h}:-$PWD}/·"
            ((ZUI[SRC_HIGHLIGHT]))||return 0
            int/iq::get-file-type -s -q $QPATH||\
                {iqw "Unknown file type, no syntax highlighting";return 1;}
            int/iq::get-stx-cmd -q $REPLY||\
                {iqw "Error: no highlighter command found";return 1;}
            local -a qcmd=("$reply[@]" "$QPATH")
            qitems=("${(@f)$($qcmd[@])}")
        else
            QTXT="!NO FILE SELECTED, PRESS F2 TO SHOW FILE TREE!"
        fi
    } always {
        if [[ $qitems == $~galiases[WRONGSTR] ]];then
            ZUI[SRC_HIGHLIGHT]=0
            qitems=("${(@f)$(<$QPATH)}")
        fi
        reply=(); -zui_glib_special_text $QTXT
        separ
        typeset -ga -U ZUILIST_NONSELECTABLE_ELEMENTS=(3 2 1)
        qitems=("$reply[1]" "$REPLY" "$qitems[@]")
    }
}

generator_B_tree() {
    ZUI[COLORING_PATTERN]="(((([^\/—])(#c2,))(#e))|·[^·]##·)"
    ZUI[QIDX]=0 ZUI[SRC_HIGHLIGHT_SWITCHED]=0
    reply=()
    if ((ZUI[HAVE_0_INPUT]));then
        -zui_glib_special_text "·Below are entries read from input·"
        qitems=("$q0input[@]")
    else
        -zui_glib_special_text "Showing files in: ·$PWD·"
        qitems=(**/*~*~(N.,@))
    fi
    typeset -ga -U ZUILIST_NONSELECTABLE_ELEMENTS=(3 2 1)
    separ
    qitems=("$reply[1]" "$REPLY" "$qitems[@]")
}

# Read & publish Configure/make output
-zui-standard-timeout-callback() {
    ((!ZUI[cat_started]&&!ZUI[VIEW_CHANGE]))&&return

    if ((ZUI[cat_started]));then
        if int/iq::read-all -u$Q0_SAVE_PIPE -t0 -x10;then
            local ql had_read=0
            integer q0idx=$#q0input+1
            if ((!$#q0input));then
                q0input[q0idx]=$ZUI[FIRST_0_INPUT]$reply[1]
                shift reply
            fi
            q0input+=("$reply[@]")
            if ((ZUI[gen_B_idx]%2==0));then
                reply=()
                -zui_glib_special_text "·Below are entries read from input·"
                separ
                qitems=("$reply[1]" $REPLY "$q0input[@]")
                -zui_glib_fly_array_refresh 1
            fi
        fi
    fi

    ((ZUI[VIEW_CHANGE]))||return 0
    integer IN=ZUI[PREV_CURRENT_IDX]

     # Preview
    if ((ZUI[gen_B_idx]%2));then
        ((ZUI[PREV_CURRENT_IDX]==ZUI[CURRENT_IDX_MAIN_BKP]))&&\
            ZUI[PREV_CURRENT_IDX]=$ZUI[CURRENT_IDX_PVIEW_BKP]
    # Tree
    else
        ((ZUI[PREV_CURRENT_IDX]==ZUI[CURRENT_IDX_PVIEW_BKP]))&&\
            ZUI[PREV_CURRENT_IDX]=$ZUI[CURRENT_IDX_MAIN_BKP]
    fi
    if ((IN!=ZUI[PREV_CURRENT_IDX]));then
        ZUI[CURRENT_IDX]=$ZUI[PREV_CURRENT_IDX]
        -zui_list_verify_vars
        ZUI[redraw]=1
    fi
    ZUI[VIEW_CHANGE]=0
    return 0
}

if (($+Opts[--refresh])); then
    iqw "Reload went OK, status normal"
    return 0
fi

## Start application ##
-zui_glib_msg "" "@@@ " "Welcome to " "IQ System " "open console!" " @@@";
integer EC
generator_B 1 1 1
while (( 1 )); do
    builtin print -n $terminfo[smcup]$termcap[ti]
    zui-event-loop a:qitems
    builtin print -n $terminfo[rmcup]$termcap[te]
    [[ -z $REPLY ]]&&break
    local QFILE= REPLY_SAVE=$REPLY; integer QIDX=0
    if [[ -z $ZUI[SEARCH_BUFFER] ]];then
         if ((ZUI[gen_B_idx]%2));then
            QFILE=$ZUI[QPATH]
            QIDX=ZUI[USER_CURRENT_IDX]
        elif [[ $REPLY_SAVE != *(·|–|—)* ]];then
            QFILE=$REPLY_SAVE
        fi
    else
        repeat 1; do typeset +U -ga __slist=("$__qlist[@]");done
        if -zui_sys_get_match_line 'QIDX'; then
            iqw "Opening " $QFILE " scrolled to line: " "#$QIDX"
             if ((ZUI[gen_B_idx]%2));then
                QFILE=$ZUI[QPATH]
            elif [[ $REPLY_SAVE != *(·|–|—)* ]];then
                QFILE=$REPLY_SAVE
                QIDX=0
            fi
        fi
    fi
    if [[ -n $QFILE ]];then
        if ! int/iq::get-editor;then
            EC+=$?
            -zui_glib_msg "" "" "" 'ERROR: Couldn''t find editor, tried '\
                "\$VISUAL (=$VISUAL) " then "" " \$EDITOR (=$EDITOR)"
            ZUI[IN_SEARCH]=0
        else
            (
                # Run the editor in $REPLY, first cd-ing into project's directory
                int/iq::run-command -C $PWD \
                    "$REPLY" ${${QIDX:#0}:++$QIDX} -- $QFILE
            )
        fi
        EC+=$?

    fi
    ZUI[VIEW_CHANGE]=1
    zcurses clear main redraw
    zcurses clear status redraw
done

-zui_glib_cleanup serialize
builtin print -n $terminfo[rmcup]$termcap[te]
return 0

}

iqopen "$@"

# vim:ft=zsh:tw=80:sw=4:sts=4:et:foldmarker=[[[,]]]
