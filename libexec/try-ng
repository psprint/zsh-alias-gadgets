# -*- mode: sh; sh-indentation: 4; indent-tabs-mode: nil; sh-basic-offset: 4; -*-
# Copyright (c) 2018 Sebastian Gniazdowski
#
# Returns a non-greedy match of the given pattern ($2)
# in the given string ($1).
#
# $1 - the string to match in
# $2 - the pattern to match in the string
#
# Example:
#
# if try-ng "abb" "a*b"; then
#   print $REPLY
# fi
# Output: ab
try-ng() {
    # Preamble – emulate & 0=…
    SNIP_EMULATE_OPTIONS_ZERO
    source $0:h:h/share/preamble.inc.zsh --func

    local -a opts; local -A Opts
    int/iq::parse-opts "q h s e" Opts opts "$@"||return 7
    set -- "$reply[@]"
    int/iq::reset
 
    local str=$1 pat=$2 retval=1
    if (($+Opts[-h]||$+Opts[-s]&&$+Opts[-e]));then
        pat="(#s)($pat)(#e)"
    elif (($+Opts[-s]));then
        pat="(#s)($pat)"
    elif (($+Opts[-e]));then
        pat="($pat)(#e)"
    else
        pat="($pat)"
    fi

    if (($+Opts[-q]));then
        : ${str/(#b)(${~pat})/${retval::=0}}
    else
        : ${(S)str/(#b)(${~pat})/${retval::=0}}
    fi
    REPLY=$match[1]
    return retval
}

# vim:ft=zsh:sw=4:sts=4:et
