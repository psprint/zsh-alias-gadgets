#!/usr/bin/env zsh
# -*- mode: sh; sh-indentation: 4; indent-tabs-mode: nil; sh-basic-offset: 4;-*-
# Copyright (c) 2018 Sebastian Gniazdowski
#
help() {
    # Preamble – emulate & 0=…
    SNIP_EMULATE_OPTIONS_ZERO
    source $0:h:h/share/preamble.inc.zsh --func

    local -a opts; local -A Opts
    int/iq::parse-opts "q" Opts opts "$@"||return 7
    set -- "$reply[@]"
    int/iq::reset

    (($+Opts[-q]))&&local -A ZIQ
    local -A QMsg=(
            tags       "generate Ctags for current directory"
            con        "open smart console for current directory"
            qprint     "print contents of given variable (by name not by value)"
            swap       "swap two files in their locations"
            gh-create  "create a repository at GitHub"
            hop        "deploy a block of code for execution in ZLE\
-scope"
            fresh-in   "finds files changed in ARGUMENT-\
minutes"
            filter     "filters out any color escape codes, reads stdin\
if no arguments"
            try-ng     "takes string and a pattern and returns the matched \
string. NON-GREEDY mode"
            tries-ng   "takes strings and a pattern and returns the strings \
each after the pattern applied. NON-GREEDY mode"
            try        "the same as try-ng, but greedy"
            tries      "the same as tries-ng, but greedy"
            x-tract    "extracts any archive, recognizes many types"
        )

    [[ -z $1 ]]&&{iqnotice Available\ commands:;angel qprint -q QMsg;return 0;}
    (($+QMsg[$1]))||{iqerr unknown command: {cmd}$1{%};return 1;}

    iqnotice $QMsg[$1]
    case $1 in
        (tags)

            iqmsg {note}Usage:{pre} angel tags [-z] [-c]{%}{nl}\
                -- {opt}-z{%}${(l:10:)} process Zsh files{nl}\
                    {opt}-c{%}${(l:10:)} process C files
            ;;
        (con)
            iqmsg {note}Usage:{pre} angel con
            ;;
        (countdown)
            iqmsg {note}Usage:{pre} angel countdown {num}[0-9]
            ;;
        (filter)
            iqmsg {note}Usage:{pre} angel filter [-T|--trim] \
                [-s|--1space] [-p|--print] [-t|--timeout] \
                [arg1] ... [argN]

            ;;
        (fresh-in)
            iqmsg {note}Usage:{pre} angel fresh-in {data}\\{minutes\}
        ;;
        (gh-create)
            iqmsg {note}Usage:{pre} angel gh-create {pid}user/repo
        ;;
        (hop)
            iqmsg {note}Usage:{pre} angel hop [-t/--timeout] \
                [--msg] [code …]
        ;;
        (palette)
            iqmsg {note}Usage:{pre} angel palette
        ;;
        (qprint)
            iqmsg {note}Usage:{pre} angel qprint VAR_NAME
        ;;
        (swap)
            iqmsg {note}Usage:{pre} angel swap {file}file file-B
        ;;
        (tries)
            iqmsg {note}Usage:{pre} angel tries {data}string{pre}\
                … {data}string-N {pat}pattern
        ;;
        (tries-ng)
            iqmsg {note}Usage:{pre} angel tries-ng {data}string{pre}\
                … {data}string-N {pat}pattern
        ;;
        (try)
            iqmsg {note}Usage:{pre} angel try {data}string{pre}\
                {pat}pattern
        ;;
        (try-ng)
            iqmsg {note}Usage:{pre} angel try-ng {data}string{pre}\
                {pat}pattern
        ;;
        (x-tract)
            iqmsg {note}Usage:{pre} angel x-tract ({file}archive file{pre}\
\|{opt}--auto{pre})
        ;;
    esac
   return 0
}
help "$@"
# vim:ft=zsh:sw=4:sts=4:et
