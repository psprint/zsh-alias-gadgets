#!/usr/bin/env zsh
# -*- mode: sh; sh-indentation: 4; indent-tabs-mode: nil; sh-basic-offset: 4; -*-

# Copyright (c) 2023 Sebastian Gniazdowski

# Run as script? Or as a function? Supports both ways.

iqopen()
{
# Preamble – emulate & 0=…
eval "${SNIP_EMULATE_OPTIONS_ZERO:-false}"||\
    0=${${${(M)${0::=${(%):-%x}}:#/*}:-$PWD/$0}:a}
source $0:h:h/share/preamble.inc.zsh --script --fun

int/iq::init-sm-con "$@"
eval "$REPLY"

set -- "$reply[@]"
ZUI[SEARCH_BUFFER]=$*

iqopen_preview_file(){
    ((ZUI[gen_B_idx]=1-ZUI[gen_B_idx]))
    ZUI[VIEW_CHANGE]=1
    -zui_std_fly_mod_regen 2 1
    if ((ZUI[gen_B_idx]%2));then
        ZUI[CURRENT_IDX_MAIN_BKP]=$ZUI[CURRENT_IDX]
    else
        ZUI[CURRENT_IDX_PVIEW_BKP]=$ZUI[CURRENT_IDX]
    fi
    __last_element=$#__list
}

separ() {
    REPLY="$ZUI[YELLOW]${(l:COLUMNS*3::—:):-}$ZUI[FMT_END]";
}

if [[ $1 != --refresh ]]; then
    ok/qnstr $PWD&&local APP=$REPLY
    -zui_std_cleanup deserialize:"iqopen_$APP"
    -zui_std_init app:"iqopen_$APP" app_name:"°Open° Console"
    emulate -L zsh -o extendedglob -o typesetsilent -o warncreateglobal -o combiningchars
    -zui_std_init2 # after emulate -LR
    ZUI[gen_B_idx]=0

    # Needed for immediate output from coprocesses (disables buffering).
    ((${+commands[stdbuf]}))&& \
        local -a stdbuf1=( stdbuf -o0 -i0 ) stdbuf2=( stdbuf -o0 -i0 )
    ((${+commands[gstdbuf]}))&& \
        local -a stdbuf1=( gstdbuf -o0 -i0 ) stdbuf2=( gstdbuf -o0 -i0 )

    ZUI[COLORING_MATCH_MULTIPLE]=0
    ZUI[COLORING_COLOR]=$ZUI[BOLD]$ZUI[YELLOW]
    ZUI[START_IN_SEARCH_MODE]=1

    -zui_std_store_default_app_config b:instant_search 1
    -zui_std_store_default_app_config s:select_mode "quit"   # Quit event loop on text-selection
    -zui_std_store_default_app_config b:text_select 1        # Allow selection of text
    -zui_std_store_default_app_config s:timeout 25
    -zui_std_store_default_app_config s:mark "white MAGENTA reverse"
    -zui_std_store_default_app_config s:text_mode off
    -zui_std_store_default_app_config b:top_anchors 0
    local -a qfiles qlines GEN2_HOPS
    zui::bindkey F2 {iqopen_preview_file}
    zui::bindkey F9 '{print current:$ZUI[CURRENT_IDX], PVIEW:$ZUI[CURRENT_IDX_PVIEW_BKP]}, main:$ZUI[CURRENT_IDX_MAIN_BKP];}'
fi

generator_A() {
    local mod="$1" ice="$2"

    local -a group1 group2 group3
    reply=()

    # First Group
    : -zui_std_rc_button "button17" "·New feature·" \
        'reply=( ",all," ); new_feature'
    group1=( $reply ) reply=()

    # Content
    reply=( "$group1[@]" )

    # Non-selectable lines  Hops to jump with [ and ]   Local anchors
    reply2=( )              reply3=( 3 )                reply4=( )

}

generator_B(){
    local -a gener=(generator_B_tree generator_B_preview)
    $gener[1+(ZUI[gen_B_idx]%2)]
}

generator_B_preview() {
    local QPATH=$__list[ZUI[CURRENT_IDX]] QTXT
    ZUI[QPATH]=$QPATH ZUI[COLORING_PATTERN]="(#s)·*·(#e)"
    reply=() qlines=()
    if [[ -n $QPATH ]];then
        QTXT="·Contents of: °$QPATH°·"
        qlines=("${(@f)"$(<$QPATH)"}")
    else
        QTXT="!NO FILE SELECTED, PRESS F2 TO SHOW FILE TREE!"
    fi
    -zui_std_special_text $QTXT
    separ
    reply=( "${reply[1]}" $REPLY "$qlines[@]" )
    reply2=( )  reply3=( 1 $GEN2_HOPS )  reply4=( )
}

generator_B_tree() {
    ZUI[COLORING_PATTERN]="(((([^\/—])(#c2,))(#e))|*[·]*)"
    ZUI[QPATH]= ZUI[QIDX]=0
    reply=()
    -zui_std_special_text "Showing files in: ·$PWD/·"
    qfiles=()
    separ
    qfiles+=(**/*~*~(.N))
    reply=( "$reply[1]" $REPLY $qfiles[@] )
    reply2=( 1 2 )  reply3=( 1 $GEN2_HOPS )  reply4=( )
}

# Read & publish configure/make output
-zui-standard-timeout-callback() {
    ((ZUI[VIEW_CHANGE]))||return 0
    integer IN=ZUI[CURRENT_IDX]

    # Preview
    if ((ZUI[gen_B_idx]%2));then
        ((ZUI[CURRENT_IDX]==ZUI[CURRENT_IDX_MAIN_BKP]))&&\
            ZUI[CURRENT_IDX]=$ZUI[CURRENT_IDX_PVIEW_BKP]
    # Tree
    else
        ((ZUI[CURRENT_IDX]==ZUI[CURRENT_IDX_PVIEW_BKP]))&&\
            ZUI[CURRENT_IDX]=$ZUI[CURRENT_IDX_MAIN_BKP]
    fi
    if ((IN!=ZUI[CURRENT_IDX]));then
        -zui_list_verify_vars
        ZUI[redraw]=1
        ZUI[VIEW_CHANGE]=0
    fi
    return 0
}

typeset -ag toggle_cols=( $ZUI[BLUE] $ZUI[BG_YELLOW] )
ZUI[autscr_col]=$toggle_cols[ZUI[autscr]+1]

if [[ $1 == --refresh ]]; then
    return
fi

## Start application ##
-zui_std_stalog "" "@@@ " "Welcome to " "IQ System " "open console!" " @@@";
integer EC
while (( 1 )); do
    command tput smcup
    zui-event-loop 1:generator_A 1:generator_B
    command tput rmcup
    [[ -z $REPLY ]]&&break
    local QFILE=; integer QIDX=0
    if ((ZUI[gen_B_idx]%2));then
        QFILE=$ZUI[QPATH]
        QIDX=ZUI[USER_CURRENT_IDX]
    elif [[ $REPLY != *(·|–|—)* ]];then
        QFILE=$REPLY
    fi

    if [[ -n $QFILE ]];then
        if ! int/iq::get-editor;then
            EC+=$?
            -zui_std_stalog "" "" "" 'ERROR: Couldn''t find editor, tried '\
                "\$VISUAL (=$VISUAL) " then "" " \$EDITOR (=$EDITOR)"
            ZUI[SEARCH_MODE]=0
        else
            (
                # Run the editor in $REPLY, first cd-ing into project's directory
                int/iq::run-command -C $PWD \
                    "$REPLY" ${${QIDX:#0}:++$QIDX} -- $QFILE
            )
        fi
        EC+=$?
    fi
    zcurses clear main redraw
    zcurses clear status redraw
done

-zui_std_cleanup serialize
command tput rmcup
return 0

}

iqopen "$@"

# vim:ft=zsh:tw=80:sw=4:sts=4:et:foldmarker=[[[,]]]
