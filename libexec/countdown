# -*- mode: sh; sh-indentation: 4; indent-tabs-mode: nil; sh-basic-offset: 4;-*-
# Copyright (c) 2018 Sebastian Gniazdowski
#
# Returns a non-greedy match of the given pattern ($2)
# in the given string ($1).
#
# $1 - the string to match in
# $2 - the pattern to match in the string
#
# Example:
#
# if try-ng "abb" "a*b"; then
#   print $REPLY
# fi
# Output: ab
countdown() {
    # Preamble – emulate & 0=…
    eval "${SNIP_EMULATE_OPTIONS_ZERO:-false}"||\
        0=${${(M)${0::=${(%):-%x}}:#/*}:-$PWD/$0}
    source $0:h:h/share/preamble.inc.zsh --func

    iq::hr() {
        local sp='▚▞'; sp="${sp[$2%2,($2%2)+1]}"
        # Maximal width is 24 characters
        local hr="$(print -f "%.$2s█%0$(($3-$2-1))s" "████████████████████" )"
        print -nP \\r%F{39}$hr
    }
    local -a opts; local -A Opts
    int/iq::parse-opts "t: -timeout: c: -color:" Opts opts "$@"||return 7
    set -- "$reply[@]"
    int/iq::opt-cascade Opts --timeout -t --color -c
    int/iq::reset
    integer q=${Opts[-t]:-5} i
    repeat q; do
        iq::hr 7 $((1+5*i)) 30
        sleep 1
        i+=1
    done
    REPLY=$match[1]
    return retval

}
countdown "$@"
# vim:ft=zsh:sw=4:sts=4:et
